a. What entries (rows) in the page directory have been filled in at this point? 
   What addresses do they map and where do they point? 
   In other words, fill out this table as much as possible:
   +-----+----------------------+---------------------------------------+
   |Entry| Base Virtual Address |  Points to (logically)                |
   +=====+======================+=======================================+
   |1023 | 0xFFC00000           | Page table for top 4MB of phys memory |
   +-----+----------------------+---------------------------------------+
   |1022 | 0xFF800000           | NULL/FREE                             |
   +-----+----------------------+---------------------------------------+
   |960  | 0xf0000000           | KERNBASE, KSTACKTOP                   |
   +-----+----------------------+---------------------------------------+
   |958  | 0xef800000           | ULIM, MMIOBASE                        |
   +-----+----------------------+---------------------------------------+
   |957  | 0xef400000           | UPVT                                  |
   +-----+----------------------+---------------------------------------+
   |956  | 0xef000000           | UPAGES                                |
   +-----+----------------------+---------------------------------------+
   |954  | 0xeebfe000           | USTACKTOP                             |
   +-----+----------------------+---------------------------------------+
   |2    | 0x00800000           | UTEXT                                 |
   +-----+----------------------+---------------------------------------+
   |1    | 0x00400000           | UTEMP                                 |
   +-----+----------------------+---------------------------------------+
   |0    | 0x00000000           | Empty Memory                          |
   +-----+----------------------+---------------------------------------+

b. We have placed the kernel and user environment in the same address space. 
   Why will user programs not be able to read or write the kernelâ€™s memory? 
   What specific mechanisms protect the kernel memory?
   Answer: User programs will not be able to read or write the kernel's memory
   because the memory management unit (MMU) ensures that user programs access
   only their allocated virtual memory.

c. What is the maximum amount of physical memory that this operating system can support? Why?
   The maximum amount of physical memory that this operating system can support is 256 MB
   because of the design limitations of JOS.

d. How much space overhead is there for managing memory, if we actually had the maximum amount of physical memory? 
   How is this overhead broken down?

e. Revisit the page table setup in kern/entry.S and kern/entrypgdir.c. 
   Immediately after we turn on paging, EIP is still a low number (a little over 1MB). 
   At what point do we transition to running at an EIP above KERNBASE? 
   What makes it possible for us to continue executing at a low EIP between when we enable paging 
   and when we begin running at an EIP above KERNBASE? Why is this transition necessary?
